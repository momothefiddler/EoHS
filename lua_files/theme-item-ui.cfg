this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- theme-item-ui.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

-- To avoid nasty theme item recursion things, defer any sophisticated scripts
-- (like ones that ever yield to the UI themselves) to report_countdown.
-- report_countdown is special and allows a limited amount of recursion.
local ui_context = {
  on_double_click = function() EoHS.local_player_can_preselect_skills (true) end,
}
if EoHS.wesnoth_113 then
  --[[EoHS.set_simple_event ("EoHS_hack", true, true, true, function() 
    EoHS.debug ("hack event occurred")
  end)]]
  --[=[wesnoth.fire("event", {
    name = "EoHS_hack",
    first_time_only = "no",
    { "lua", {
      code = [[--EoHS.uhh
EoHS.debug ("hack event occurred")
]]
    }},
  })]=]
  ui_context = {
    on_click = function(x,y)
      --[[EoHS.debug ("a")
      wesnoth.fire("do_command", { {"fire_event",{raise="EoHS_hack"}} })
      EoHS.debug ("b")]]
      local unit = EoHS.get_unit (x,y)
      if unit then
      local actions = EoHS.unit_actions (unit)
      if actions [1] then
        if true then
          local choices = {}
          local cancel = {
            x=x,y=y,
            label = "Cancel",
          }
          table.insert (choices, cancel)
          for index, action in ipairs (actions) do
            local info = EoHS.actions [action]
            table.insert (choices, {
              x=x,y=y,
              image = info.image,
              label = info.name,
            })
          end
          EoHS.choose_on_map (unit, choices, {ok=cancel,cancel=cancel})
        end
      end
      end
    end,
    frequently = function ()
      EoHS.maybe_choose_premade_skills ()
    end,
  }

end
EoHS.queue_ui = function (time_sensitive, func)
  ui_context.queue = ui_context.queue or {}
  table.insert (ui_context.queue, {
    time = wesnoth.get_time_stamp(),
    time_sensitive = time_sensitive,
    func=func
  })
end

EoHS.accept_ui_input = function (context)
  local old_context = ui_context
  ui_context = context
  context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  
  EoHS.capture_errors (function()
    wesnoth.fire ("redraw")
    while not context.exiting do
      wesnoth.fire ("delay", {time = 10})
      --wesnoth.fire ("redraw")
    end  
  end)
  
  old_context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  ui_context = old_context
end

EoHS.exit_ui_input = function()
  ui_context.exiting = true
end

EoHS.suppress_ui_input_during = function (inner_func)
  local old_context = ui_context
  ui_context = {suppressed=true}
  
  EoHS.capture_errors (inner_func)
  
  old_context.last_began_accepting_input_at = wesnoth.get_time_stamp()
  ui_context = old_context
end

EoHS.theme_ui_safe = function() return (not (ui_context.in_callbacks or ui_context.exiting or ui_context.suppressed)) and EoHS.comfortably_during_turn and (not EoHS.during_move) and (not EoHS.in_theme_item) and (not EoHS.to_sync_soon) and (not wesnoth.view_locked()) and (not (ui_context.last_began_accepting_input_at and ui_context.last_began_accepting_input_at+200 > wesnoth.get_time_stamp())) end

local old_report_countdown = wesnoth.theme_items.report_countdown 
wesnoth.theme_items.report_countdown = EoHS.filter_func(function()
  local current_context = ui_context
  
  if EoHS.theme_ui_safe() then
    ui_context.in_callbacks = true
    EoHS.capture_errors (function()
      EoHS.check_for_deselect()
      -- swap them in case more is added to the queue during the execution
      local executing = current_context.queue or {}
      current_context.queue = {}
    
      for index, thing in ipairs (executing) do
        if not (thing.time_sensitive and wesnoth.get_time_stamp() > thing.time + 500) then
          thing.func()
        end
      end
      if current_context.frequently then
        if not (current_context.last_frequent_call and wesnoth.get_time_stamp() < current_context.last_frequent_call + 100) then
          current_context.last_frequent_call = wesnoth.get_time_stamp()
          current_context.frequently()
        end
      end
    end)
    ui_context.in_callbacks = false
  end
  
  return old_report_countdown()
end)

-- Mega hack (could probably be housed in a different file if we want to shorten this one)
do
  local unit1_moused_over_x, unit1_moused_over_y
  local unit2_moused_over_x, unit2_moused_over_y
  local last_mouse_over_time
  local mouseover_counter = 0
  local update_off_turn_menu_invocation_hack = EoHS.filter_func(function()
    --if wesnoth.sides[wesnoth.current.side].controller == "network" then
      local time = EoHS.timestamp()
      if last_mouse_over_time and ((time - last_mouse_over_time) > 800) then
        mouseover_counter = 0
        unit1_moused_over_x = nil; unit1_moused_over_y = nil
        unit2_moused_over_x = nil; unit2_moused_over_y = nil
      end
      last_mouse_over_time = time
      local du = wesnoth.get_displayed_unit()
      if du then
        if (du.x == unit2_moused_over_x) and (du.y == unit2_moused_over_y) then
          -- Same as last time - do nothing.
        else
          if unit2_moused_over_x and unit1_moused_over_x and not ((du.x == unit1_moused_over_x) and (du.y == unit1_moused_over_y)) then
            -- Mousing to a third, different unit - reset
            mouseover_counter = 0
          end
          -- Otherwise, it's initial mousing or mousing back to the same unit, so we continue incrementing
          mouseover_counter = mouseover_counter + 1
          
          -- unit2 is the latest, unit1 is the previous one
          unit1_moused_over_x = unit2_moused_over_x
          unit1_moused_over_y = unit2_moused_over_y
          unit2_moused_over_x = du.x
          unit2_moused_over_y = du.y
          
          if mouseover_counter > 8 then
            mouseover_counter = 0
            -- Hack - if one of the units you were mousing over was a trainer, start out with that one in the menu
            --[[local unit2 = EoHS.get_unit(unit2_moused_over_x,unit2_moused_over_y)
            if unit2 and EoHS.unit_can_train(unit2) then EoHS.last_selected_id = EoHS.unit_id(unit2)
            else
              local unit1 = EoHS.get_unit(unit1_moused_over_x,unit1_moused_over_y)
              if unit1 and EoHS.unit_can_train(unit1) then EoHS.last_selected_id = EoHS.unit_id(unit1) end
            end]]
            --EoHS.local_player_can_preselect_skills(true)
            wesnoth.fire ("print", {
              text =_"You don't have to do this weird gesture anymore! Just double-click in any hex.",
              size = 25,
              duration = 150,
              red = 255, green = 255, blue = 255,
            })
          end
        end
      end
    --end
  end)
  local old_position_theme_item = wesnoth.theme_items.position
  wesnoth.theme_items.position = function()
    update_off_turn_menu_invocation_hack()
    return old_position_theme_item()
  end
end

-- Also keep track of what unit was selected last on your own turn.
-- We can't use proper select events because that would invalidate undo, so use on_event instead.
local old_on_event = wesnoth.game_events.on_event
wesnoth.game_events.on_event = EoHS.filter_func(function()
  local name = wesnoth.current.event_context.name
  EoHS.most_recent_event_name = name
  -- suppress "clicks" that straddle a event boundary
  if name ~= "select" then EoHS.recent_redraws = {} end
  EoHS.fast_update_all_siphon_strength_graphics()
  -- This part is purely responsible for UI stuff. Avoid doing it during generated events, like swarm movement.
  if not EoHS.event_stack then
    if name == "exit_hex" or name == "attack" or name == "advance" or name == "prerecruit" or name == "prerecall" then
      EoHS.during_move = true
    end
    if name == "moveto" or name == "attack_end" or name == "post_advance" or name == "recruit" or name == "recall" then
      EoHS.during_move = false
    end
    EoHS.view_should_not_be_locked()
  end
  if old_on_event then old_on_event() end
end)


EoHS.theme_item = function (name, impl)
  local default = wesnoth.theme_items [name]
  wesnoth.theme_items [name] = EoHS.filter_func(function()
    if EoHS.in_theme_item then
      EoHS.err ("Recursive theme item detected!")
      return default()
    end
    if EoHS.redraw_unexpected then
      EoHS.err ("Unexpected redraw detected.")
    end

    EoHS.in_theme_item = true
    
    local result = EoHS.capture_errors (impl, default) or {}
    
    EoHS.in_theme_item = nil
    return result
  end)
end

EoHS.theme_item ("upkeep", function(old_upkeep)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_upkeep()
  if EoHS.get_variable("settings_inited") and EoHS.get_variable("settings.eliminate_upkeep") then
    return { { "element", { text = _"EoHS" }} }
  else
    return old_result
  end
end)

EoHS.theme_item ("unit_type", function(old_unit_type)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_type()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local override = EoHS.get_unit_variable(wunit, "type_name_override")
  if override then
    return { { "element", {
      text = (w111 and override or '<span foreground="#f5e6c1">'..override..'</span>'),
      tooltip = EoHS.substitute(_"Type: <b>$1|</b>\n$2|", {override, EoHS.get_unit_variable(wunit, "type_description_override") or ""})
    }} }
  end
  return old_result
end)

EoHS.theme_item ("unit_race", function(old_unit_race)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_race()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  local custom = EoHS.get_unit_variable(wunit, "race")
  if custom then
    local override = EoHS.custom_races[custom].name
    return { { "element", {
      text = (w111 and override or '<span foreground="#a69275">'..override..'</span>'),
      tooltip = EoHS.substitute(_"Race: <b>$1|</b>", {override})
    }} }
  end
  return old_result
end)


if not EoHS.wesnoth_113 then

EoHS.recent_redraws = {}
EoHS.theme_item ("position", function(old_position)
  local result = old_position()
  -- defend very hard against other add-ons customizing the theme item
  if result and result[1] and result[1][2] and result[1][2].text then
    local x,y = string.match (result[1][2].text, "(%d+),(%d+)")
    x,y = tonumber (x),tonumber (y)
    local selected_x,selected_y = wesnoth.get_selected_tile()
    --wesnoth.message (EoHS.inspect(selected_x))
    local now = wesnoth.get_time_stamp()
    
    -- when the mouse is off the map, but a unit is selected,
    -- old_position defaults to the location of the selected unit.
    -- However, terrain is empty. Handle that case:
    if not old_terrain() [1] then x, y = nil, nil end
    
    local current = {
      mouse_x=x,
      mouse_y=y,
      selected_x=selected_x,
      selected_y=selected_y,
      time=now,
      usable = EoHS.comfortably_during_turn and (not EoHS.during_move) and (not wesnoth.view_locked()),
    }
    local recent_redraws = EoHS.recent_redraws
    table.insert (recent_redraws, 1, current)
    if recent_redraws [6] then table.remove (recent_redraws) end
    
    if recent_redraws [2] then
      if recent_redraws [2].mouse_x ~= current.mouse_x or recent_redraws [2].mouse_y ~= current.mouse_y then
        if ui_context.on_mouse_move then EoHS.queue_ui(true, function() 
          ui_context.on_mouse_move (x,y,recent_redraws [2].mouse_x,recent_redraws [2].mouse_y)
        end) end
      end
    end
    
    local can_be_click = true
    for index, redraw in ipairs(recent_redraws) do
      local previous = recent_redraws [index+1]
      if not redraw.usable then can_be_click = false end
      if redraw.mouse_x ~= current.mouse_x then can_be_click = false end
      if redraw.mouse_y ~= current.mouse_y then can_be_click = false end
      if redraw.time < current.time - 500 then can_be_click = false end
      if index == 2 and redraw.considered_click then can_be_click = false end
      if (not redraw.selected_x) and previous and previous.selected_x then
        can_be_click = false
      end
      if can_be_click and index == 2 then
        current.considered_click = true
        if ui_context.on_click then EoHS.queue_ui(true, ui_context.on_click) end
      end
      if can_be_click and index == 4 then
        if ui_context.on_double_click then EoHS.queue_ui(true, ui_context.on_double_click) end
      end
    end
    
    EoHS.check_for_deselect()
  end
  return result
end)

end

local old_selected
local most_recent_deselect = wesnoth.get_time_stamp()
local most_recent_click = wesnoth.get_time_stamp()
EoHS.check_for_deselect = function()
  local current_selected = wesnoth.get_selected_tile()
  if old_selected and not current_selected then
    if ui_context.on_deselect then EoHS.queue_ui(true, ui_context.on_deselect) end
    most_recent_deselect = wesnoth.get_time_stamp()
  end
  old_selected = current_selected
end
if EoHS.wesnoth_113 then
  local old_mouse_move = wesnoth.game_events.on_mouse_move or (function() end)
  wesnoth.game_events.on_mouse_move = EoHS.filter_func(function(x,y)
    if ui_context.on_mouse_move then
      EoHS.queue_ui(true, function() ui_context.on_mouse_move(x,y) end)
    end
    old_mouse_move(x,y)
  end, function() if EoHS.theme_ui_safe() then EoHS.may_do_synced_now() end end)
  local old_mouse_action = wesnoth.game_events.on_mouse_action or (function() end)
  wesnoth.game_events.on_mouse_action = EoHS.filter_func(function(x,y)
    local click_recorded_at = wesnoth.get_time_stamp()
    EoHS.queue_ui(true, function()
      local click_confirmed_at = wesnoth.get_time_stamp()
      if most_recent_deselect < click_recorded_at and click_confirmed_at < click_recorded_at + 100 then
        if ui_context.on_double_click and click_recorded_at < most_recent_click - 500 then
          ui_context.on_double_click(x,y)
        elseif ui_context.on_click then
          ui_context.on_click (x,y)
        end
      end
      most_recent_click = click_confirmed_at
    end)
    --EoHS.debug ("click"..x..","..y..","..EoHS.inspect({wesnoth.get_selected_tile()}))
    old_mouse_action(x,y)
  end)
end


--[[wesnoth.theme_items.unit_moves = function()
  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  return { {"element",{ text=EoHS.substitute(_"$1|/$2|, $3| AP", {wunit.moves, wunit.max_moves, EoHS.get_unit_action_points(wunit)})}} }
end]]
-- TODO rename filter_func so this is correct usage
-- TODO: improve descriptions of Soul Bind weapons, lightning attacks
EoHS.theme_item ("unit_weapons", function(old_unit_weapons)
  -- always invoke it even if we don't use the result, in case another add-on is using it to invoke unrelated scripts
  local old_result = old_unit_weapons()

  local info = EoHS.current_targeting_info
  if info then
    local result = {}
    for index, element in ipairs (info.elements.independent) do
      table.insert (result, element)
    end
    for index, element in ipairs (info.elements.dependent) do
      table.insert (result, element)
    end
    return result
  end

  local wunit = wesnoth.get_displayed_unit()
  if not wunit then return {} end
  if not EoHS.get_variable("settings_inited") then return old_result end
  local result = {}
  local ap = EoHS.get_unit_action_points(wunit)
  local ap_color = "00ff00"
  if ap < 6 then ap_color = string.format("%.2x%.2x%.2x", 120-(ap*24), 120+(ap*15), 120+(ap*15)) end
  table.insert(result, {"element",{ text='<span foreground="#'..ap_color..'">'..EoHS.substitute(_"AP: $1|", {ap})..'</span>\n' }})
  EoHS.if_has_total_knowledge_of_side(wunit.side, function()
    local unit = EoHS.get_unit(wunit.x, wunit.y)
    if unit then
      local mana_income = EoHS.unit_mana_income(unit)
      if mana_income then
        local mana = EoHS.get_unit_variable(unit, "mana") or 0
        local mana_cap = EoHS.unit_mana_cap(unit)
        local mana_entry = EoHS.substitute(mana_cap and _'mana: $1|/$2|<span color="#a0a0a0">, +$3|/turn</span>\n' or _'mana: $1|<span color="#a0a0a0">, +$3|/turn</span>\n', {mana, mana_cap, mana_income})
        table.insert(result, {"element",{ text=mana_entry }})
        if EoHS.get_wizard_setting(unit, "can_spend_gold_on_spells") then
          local side_info = wesnoth.sides[unit.side]
          --[[local income = side_info.total_income
          -- side_info.total_income does not take into account upkeep
          local income_source = wesnoth.theme_items.income()
          -- defend very hard against other add-ons customizing the theme item
          if income_source and income_source[1] and income_source[1][2] and income_source[1][2].text then
            income_source = income_source[1][2].text
            if type (income_source) == "string" then
              income_source = - tonumber(string.match (income_source, ">.*(%d+)"))
            end
            if type (income_source) == "number" then
              income = income_source
            end
          end]]
          --table.insert(result, {"element",{ text=EoHS.substitute(_'m+gold: $1|<span color="#a0a0a0">, +$2|/turn</span>\n', {mana+side_info.gold, mana_income+income}) }})
          table.insert(result, {"element",{ text=EoHS.substitute(_'mana+gold: $1|\n', {mana+side_info.gold}) }})
        end
      end
    end
  end)
  
  if EoHS.get_unit_variable (wunit, "wizard_level") then
    table.insert(result, {"element",{
      text=EoHS.substitute(_'<span color="#00a0e1">Shared XP: $1|/$2| this turn</span>\n\n', {
        EoHS.get_unit_variable (wunit, "shared_experience_this_turn") or 0,
        EoHS.wizard_shared_experience_limit (wunit)}),
      tooltip=_"Wizards gain all the experience gained by ANY other unit on their side, up to a certain limit per turn."
    }})
  end
  
  for i,e in ipairs(old_result) do
    table.insert(result, e)
  end
  
  return result
end)

-->>)}
