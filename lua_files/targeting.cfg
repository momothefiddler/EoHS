this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- targeting.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,xpcall = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,xpcall
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local explanation_text = _"Right-click to choose a target. Right-click off the map to cancel."
if EoHS.wesnoth_113 then
  explanation_text = _"Click to choose a target. Right-click to cancel."
end

local independent = "independent"
local dependent = "dependent"

local hover_hex = function (kind,mods) return "misc/hover-hex"..kind.."-top.png"..mods.."~BLIT(misc/hover-hex"..kind.."-bottom.png"..mods..")" end
local preset_halos = {
  help = hover_hex("-yours",""),
  harm = hover_hex("-enemy","~RC(magenta>red)"),
  attack = hover_hex("-enemy","~RC(magenta>red)"),
  potential_attack = hover_hex("-enemy","~RC(magenta>red)").."~O(0.5)",
  change = hover_hex("","~RC(magenta>gold)"),
  potential_change = hover_hex("","~RC(magenta>gold)").."~O(0.5)",
}

EoHS.action_specific_stuff = function (kind, parameters, extras)
  local action = EoHS.actions [parameters.action_id]
  local stuff = action["target_"..kind.."_stuff"]
  if stuff then return stuff(parameters, extras) or {} end
  return {}
end
EoHS.all_action_stuff = function (kind, parameters, extras)
  -- you can omit the "kind" parameter if you want everything
  if type (kind) == "table" then
    local result = EoHS.all_action_stuff (independent, kind, parameters)
    for index, thing in ipairs (EoHS.all_action_stuff (dependent, kind, parameters)) do
      table.insert (result, thing)
    end
    return result
  end
  
  extras = extras or {}
  local result = {}
  local range = EoHS.action_range (parameters)
  
  if range and not extras.ignore_range then
    if kind == independent then
      table.insert (result, {"aspect", {
        kind= _"Range",
        value= tostring(range),
        standard_aspect_index = "range",
      }})
    elseif parameters.src_x and parameters.target_x then
      local distance = EoHS.distance_between (
        parameters.src_x, parameters.src_y,
        parameters.target_x, parameters.target_y,
        EoHS.known_passable_only (parameters.side), 100)
      local valid = distance and distance <= range
      if not (distance and distance <= 100) then distance = "Unreachable" end
      table.insert (result, {"text", {
        text = EoHS.substitute (_"Distance: $1|", {distance}),
        forbidden = not valid,
      }})
    end
  end
  
  local actor = EoHS.get_unit(parameters.actor_id)
  if actor and kind == independent then
    local action = EoHS.actions [parameters.action_id]
    local cost = EoHS.action_cost(parameters)
  
    if cost.action_points then
      table.insert (result, {"aspect", {
        kind=_"AP",
        value=tostring(cost.action_points),
        forbidden = EoHS.get_unit_action_points(actor) < cost.action_points,
        standard_aspect_index = "ap",
      }})
    end
    if cost.once_per_turn then
      if EoHS.get_unit_variable (actor, "used_"..parameters.action_id) then
        table.insert (result, {"text", {
          text=_"You already cast this spell this turn.",
          forbidden = true,
        }})
      end
    end
    local mana = math.max(0, EoHS.get_unit_variable(actor, "mana") or 0)
    local total_mana_available = mana
    if EoHS.get_wizard_setting(actor, "can_spend_gold_on_spells") then
      total_mana_available = total_mana_available + math.max(0, wesnoth.sides[actor.side].gold)
    end
    if EoHS.get_unit_skill (actor, "scribe") then
      local scroll_cost = (cost.mana or 0) + EoHS.scroll_cost
      table.insert (result, {"scroll_cost", {
        scroll_cost = scroll_cost,
        scroll_forbidden = scroll_cost > total_mana_available,
      }})
    end
    if cost.mana then
      local s = {
        kind=_"Mana cost",
        value=""..cost.mana,
        standard_aspect_index = "mana",
      }
      if mana >= cost.mana then
        -- ... 
      elseif EoHS.get_wizard_setting(actor, "can_spend_gold_on_spells") and (mana+wesnoth.sides[actor.side].gold >= cost.mana) then
        s.details = EoHS.substitute(_"You will transmute $1| gold into mana.", {cost.mana-mana})
      else
        s.forbidden = true
      end
      table.insert (result, {"aspect", s})
    end
  
    if cost.gold then
      table.insert (result, {"aspect", {
        kind=_"Gold cost",
        value=""..cost.gold,
        forbidden = wesnoth.sides[actor.side].gold < cost.gold,
      }})
    end
    
    if (action.is_spell and not parameters.scroll_id) and (EoHS.get_unit_variable(actor, "spiritform")) or (EoHS.get_unit_variable(actor, "ogre_fury")) then
      table.insert (result, {"text", {
        text=_"You can't cast spells while transformed.",
        forbidden = true,
      }})
    end
    if parameters.given_recently then
      table.insert (result, {"text", {
        text=_"A unit can't use a scroll it was given on the same turn.",
        forbidden = true,
      }})
    end
  end
  
  if extras and extras.list_entry_only then
    extras = EoHS.deep_copy (extras)
    extras.validity_only = true
  end
  for index, thing in ipairs (EoHS.action_specific_stuff (kind, parameters, extras)) do
    table.insert (result, thing)
  end
  return result
end

EoHS.targeting_elements = function (kind, stuff, name, extras)
  local result = {}
  local do_text = function (thing)
    local text
    if thing [1] == "text" then
      text = thing [2].text
    elseif thing [1] == "aspect" then
      text = EoHS.substitute (_"$kind|$value|$details|", {
        kind= thing [2].kind and thing [2].kind..":" or "",
        value= thing [2].value and " "..thing [2].value or "",
        details= thing [2].details and "\n  ("..thing [2].details..")" or "",
      })
    end
    if text then
      local color = thing [2].color
      if not color then
        color = EoHS.validity_color (not thing [2].forbidden)
      end
      if type(color) == "table" then
        color = EoHS.element_color (color)
      end
      text = EoHS.wrap_text (tostring (text), 22, {subsequent_indentation = 2})
      table.insert (result, {"element", {
        text = '<span color="'..color ..'">'..text..'</span>\n',
      }})
    end
  end
  
  if kind == independent then
    do_text ({"text", {
      text = EoHS.substitute (_"\n$1|\n  $2|", {name, explanation_text})
    }})
  end
  for index, thing in ipairs (stuff) do
    do_text (thing)
  end
  return result
end

EoHS.target_is_valid = function (parameters, extras)
  extras = EoHS.deep_copy (extras) or {}
  extras.validity_only = true
  for index, thing in ipairs (EoHS.all_action_stuff (dependent, parameters, extras)) do
    if thing [2].forbidden then
      return false
    end
  end
  return true
end

EoHS.action_is_valid = function (parameters, extras)
  extras = EoHS.deep_copy (extras) or {}
  extras.validity_only = true
  for index, thing in ipairs (EoHS.all_action_stuff (independent, parameters, extras)) do
    if thing [2].forbidden then
      return false
    end
  end
  return extras.ignore_target or EoHS.target_is_valid (parameters, extras)
end

EoHS.choose_action_target = function (parameters)
  local options = {}
  local action = EoHS.actions [parameters.action_id]
  local actor = EoHS.get_unit (parameters.actor_id)
  local range = EoHS.action_range (parameters)
  local targeting_range_override = action.targeting_range_override and  action.targeting_range_override(parameters)
  if not (range or targeting_range_override) then
    options.no_choice = true
  else
    local legal_targets_array = targeting_range_override or EoHS.find_reach (parameters.src_x, parameters.src_y, EoHS.known_passable_only (parameters.side), range)
    EoHS.filter (legal_targets_array, function(target)
      local targeted_parameters = EoHS.deep_copy (parameters)
      targeted_parameters.target_x = target.x
      targeted_parameters.target_y = target.y
      return EoHS.target_is_valid (targeted_parameters, {ignore_range = true})
    end)
    options.legal_targets = legal_targets_array
  end
  
  options.independent_stuff = EoHS.all_action_stuff (independent, parameters)
  options.dependent_stuff_function = function(x,y)
    local targeted_parameters = EoHS.deep_copy (parameters)
    targeted_parameters.target_x, targeted_parameters.target_y = x,y
    return EoHS.all_action_stuff (dependent, targeted_parameters)
  end
  
  options.actor = actor
  options.name = EoHS.substitute (_"Casting $1|", {action.name})

  return EoHS.choose_target (options)
end

local explained_yet = false
EoHS.choose_target = function (options)
  EoHS.assert (not EoHS.context.unison, "choose_target should only happen for one player")
  local actor = options.actor
  local info = {
    legal_targets_map = {},
    no_choice = options.no_choice,
    actor = actor,
    side = options.side or actor.side,
    done = false,
    stuff = {
      independent = {},
      dependent = {},
    },
    elements = {
      independent = {},
      dependent = {},
    },
  }
  if options.legal_targets then
    for index, target in ipairs (options.legal_targets) do
      info.legal_targets_map [target.x..","..target.y] = target
    end
  end
  
  local init_stuff = function(kind)
    for item in helper.child_range (info.stuff [kind], "item") do
      if preset_halos [item.halo] then
        item.halo = preset_halos [item.halo] .. (item.halo_mods or "")
      end
      EoHS.place_item (item)
    end
    for label in helper.child_range (info.stuff [kind], "label") do
      local label = EoHS.deep_copy (label)
      -- only one client can see the labels anyway, but making them team labels
      -- means they DON'T override regular labels, which is good for map compatibility.
      if not label.color then
        label.color = EoHS.validity_color (not label.forbidden)
      end
      if type(label.color) == "table" then
        label.color = EoHS.label_color (label.color)
      end
      label.team_name = wesnoth.sides [info.side].team_name
      wesnoth.fire ("label", label)
    end
    info.elements [kind] = EoHS.targeting_elements (kind, info.stuff [kind], options.name)
  end
  local clear_stuff = function (kind)
    for item in helper.child_range (info.stuff [kind], "item") do
      EoHS.remove_item (item)
    end
    for label in helper.child_range (info.stuff [kind], "label") do
      wesnoth.fire ("label", {
        x=label.x,
        y=label.y,
        team_name = wesnoth.sides [info.side].team_name,
        text="",
        immutable = false,
      })
    end
    info.stuff [kind] = {}
  end
  local change_target = function (x, y)
    clear_stuff (dependent)
    info.target_x, info.target_y = x, y
    if x then
      info.stuff [dependent] = options.dependent_stuff_function and options.dependent_stuff_function (x,y) or {}
      init_stuff (dependent)
    end
    wesnoth.fire ("redraw")
  end
  
  info.stuff [independent] = options.independent_stuff or {}
  local width, height = wesnoth.get_map_size()
  for something = 0, width+1 do for whatever = 0, height+1 do
    if (not info.no_choice) and (not info.legal_targets_map [something..","..whatever]) then
      table.insert (info.stuff [independent], {"item",{x= something,y= whatever, halo = "terrain/darken.png"}})
    end
  end end
  
  init_stuff (independent)
  
  info.change_target = change_target
  
  EoHS.current_targeting_info = info
  
  wesnoth.select_hex (actor.x, actor.y, false, false)
  
  -- suppress footsteps
  local old_moves = actor.max_moves
  local old_attacks = actor.attacks_left
  actor.max_moves = 0
  actor.attacks_left = 0
  wesnoth.put_unit (actor)
  -- ... But don't let the EoHS code observe these incorrect values
  info.actor_max_moves = old_moves
  actor.max_moves = old_moves
  actor.attacks_left = old_attacks
  
  if not explained_yet then
    wesnoth.fire ("print", {
      text = explanation_text,
      size = 25,
      duration = 150,
      red = 255, green = 255, blue = 255,
    })
    explained_yet = true
  end
  
  local ui_context = {
    on_mouse_move = function(x,y)
      if EoHS.location_is_on_the_map(x,y) then
        info.change_target (x,y)
      end
    end,
    frequently = function()
      local something, whatever = wesnoth.get_selected_tile()
      if something ~= info.actor.x or whatever ~= info.actor.y then
        wesnoth.select_hex (info.actor.x, info.actor.y, false, false)
      end
    end,
  }
  if EoHS.wesnoth_113 then
    ui_context.on_click = function(x,y)
      if info.no_choice or (x and info.legal_targets_map [x..","..y]) then
        info.target_x,info.target_y = x,y
        EoHS.exit_ui_input()
      end
    end
    ui_context.on_deselect = function(x,y)
      info.target_x,info.target_y = nil,nil
      EoHS.exit_ui_input()
    end
  else
    ui_context.on_deselect = function(x,y)
      if not (info.no_choice or (info.target_x and info.legal_targets_map [info.target_x..","..info.target_y])) then
        info.target_x,info.target_y = nil,nil
      end
      EoHS.exit_ui_input()
    end
  end
  EoHS.accept_ui_input(ui_context)
  
  EoHS.current_targeting_info = nil
  
  clear_stuff (dependent)
  clear_stuff (independent)
  -- restore the correct move and attack values
  wesnoth.put_unit (actor)
  EoHS.redraw()
  return info.target_x, info.target_y
end


EoHS.choose_on_map = function(actor, choices, options)
  options = options or {}
  local w,h = wesnoth.get_map_size()
  if w*h - 1 < #choices and not options.allow_incomplete then
    return EoHS.choose_in_dialog(choices, options)
  end
  
  local choices_map = {}
  local legal_position = function (x,y)
    return EoHS.location_is_on_the_map (x, y) and not choices_map [x..","..y]
  end
  
  for index, choice in ipairs (choices) do
    local x,y = choice.x,choice.y
    if legal_position(x, y) then
      choices_map [x..","..y] = choice
    end
  end
  local awkward_choices = {}
  for index, choice in ipairs (choices) do
    if choices_map [choice.x..","..choice.y] ~= choice then
      for x,y in helper.adjacent_tiles (choice.x, choice.y) do
        if legal_position(x, y) then
          choices_map [x..","..y] = choice
          choice.x,choice.y = x,y
          break
        end
      end
      if choices_map [choice.x..","..choice.y] ~= choice then
        table.insert (awkward_choices, choice)
      end
    end
  end
  
  local frontier = EoHS.priority_queue(function(hex) return -hex.cost end)
  local found_hexes = {}
  local find_hex = function(x,y,old_cost)
    local idx = x..","..y
    if not found_hexes[idx] then
      found_hexes[idx] = true
      frontier.insert({x=x,y=y,cost=(old_cost or 0) + 1})
      if legal_position(x, y) then
        local choice = table.remove (awkward_choices)
        choices_map [x..","..y] = choice
        choice.x,choice.y = x,y
      end
    end
  end
  find_hex(actor.x,actor.y)
  while frontier.top() and awkward_choices[1] do
    local start = frontier.pop()
    for x,y in helper.adjacent_tiles(start.x, start.y) do
      if awkward_choices[1] then find_hex(x,y,start.cost) end
    end
  end
  
  local stuff= {}
  local labels = {}
  for index, choice in ipairs (choices) do
    if choice.image then table.insert (stuff, {"item",{x= choice.x,y= choice.y, halo = choice.image}}) end
    if choice.label then table.insert (stuff, {"label",{x= choice.x,y= choice.y, text = choice.label}}) end
  end
  
  local target_x, target_y = EoHS.choose_target({
    actor = actor,
    legal_targets = choices,
    independent_stuff = stuff,
    dependent_stuff_function = function(x,y)
      return {}
    end,
  })
  return target_x and choices[target_x..","..target_y]
end

local g = function(contents) return { "grid", contents } end
local r = function(contents) return { "row", contents } end
local c = function(contents) return { "column", contents } end

EoHS.choose_in_dialog = function(choices, options)
  options = options or {}
  local ok,cancel
  local finished = false
  local result
  local context = EoHS.make_dialog_context (function() if ok then ok() end end, function() if cancel then cancel() end end)
  local rows = {}
  local grid = g(rows)
  if options.heading_label then
    table.insert (rows, r{c{border="all", border_size=15,  {"label",{label = options.heading_label}} }})
  end
  for index, choice in ipairs (choices) do
    local choose_function = function ()
      finished = true
      result = choice
    end
    table.insert (rows, r{c{context.button ({label = choice.label.."mmmmmm\nm\nm", id=index}, choose_function)}})
    local canvas = { {"text",{
          x = "(if(text_width < (width+2-height), ((width+2-height) - text_width) / 2 + (height-2), height-4))",
          y = EoHS.macros.GUI__TEXT_VERTICALLY_CENTRED,
          w = "(text_width)",
          h = "(text_height)",
          font_size = 16,
          color = "221, 221, 221, 255",
          text = choice.label,
        }}, choice.image and {"image",{
          x = 2,
          y = 2,
          w = "(height-4)",
          h = "(height-4)",
          name = choice.image,
        }} or nil }
    context.preshow (function()
      EoHS.set_canvas_over_button (canvas, index)
    end)
    if options.ok == choice then ok = choose_function end
    if options.cancel == choice then cancel = choose_function end
  end
  while not finished do
    context.show (grid)
  end
  return result
end

-->>)}
