this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- initialization.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

local w111 = wesnoth.compare_versions(wesnoth.game_config.version, ">=", "1.11.0")

EoHS.author_trait = { "trait", {
  id="author",
  name=(_"author"),
  description=(_"Elvish_Pillager is the author of Era of High Sorcery. Feel free to report bugs to them!"),
}}
EoHS.init_campaign = function()
  EoHS.capture_errors(function()
    EoHS.begin_event(true, false) -- Most of the time we put these outside the function, directly in the [lua] code=,
    -- but here we want the campaign-initing command - the only thing called directly from WML -
    -- to be as short as possible.
    
    EoHS.set_variable("first_player_picks_settings", EoHS.first_player_picks_settings)
    EoHS.set_variable("settings_inited", false)
    EoHS.set_variable("next_scroll_id", 1)
    EoHS.set_variable("next_unit_id", 1001) -- high number to avoid masking ID-misuse bugs by being equal to underlying_ids
    EoHS.set_variable("show_menu_item", false)
    wesnoth.fire("set_menu_item", {
      id = "EoHS_menu_item",
      image = "icons/scroll_red.png~SCALE(20,20)",
      description = _"EoHS dialog",
      synced = false,
      { "show_if", {
        { "variable", {
          name="EoHS.show_menu_item",
          boolean_equals="true",
        }}
      }},
      { "command", {
        { "lua", {
          code = [[--EoHS.menu_item_invoked
  EoHS.suppress_ui_input_during (EoHS.menu_item_invoked)]]
        }},
      }},
    })
    -- TODO: is there any automatic way to make this show up only in my tests?
    --[[wesnoth.fire("set_menu_item", {
      id = "EoHS_zdebug_menu_item",
      image = "icons/scroll_red.png~SCALE(20,20)~GS()~CS(-50,0,0)",
      description = _"EoHS debug mode",
      { "show_if", {
        { "variable", {
          name="EoHS.debug_mode",
          boolean_equals="false",
        }}
      }},
      { "command", {
        { "set_variable", {
          name = "EoHS.debug_mode", value = true
        }},
      }},
    })]]
    
    for side in ipairs(wesnoth.sides) do
      EoHS.init_side_variables(side)
      EoHS.set_side_variable(side, "persistent_variables", {})
    end
    
    local leaders = EoHS.get_units({ canrecruit=true })
    for i,unit in ipairs(leaders) do
      EoHS.set_unit_variable(unit, "is_starting_leader", true)
      local modifications = EoHS.force_subtag(unit, "modifications")
      local variables = EoHS.force_unit_variables(unit)
      local skillset = EoHS.get_unit_skillset(unit)
      variables.is_wizard = true
      if (type(unit.name) == "string") and string.match(unit.name, "^Elvish_Pillage") then
        unit.name = "Elvish_Pillager"
        table.insert(modifications, EoHS.author_trait)
      end
      if EoHS.side_is_angerpersonified(unit.side) then unit.gender = "female" end
      EoHS.set_side_variable(unit.side, "original_nick", unit.name)
      EoHS.set_unit_dress_up_options(unit, EoHS.random_dress_up_options(unit))
      EoHS.update_all_type_adjustments(unit)
      unit.hitpoints = unit.max_hitpoints
      EoHS.put_unit(unit)
    end
    EoHS.init_scenario()
    
    EoHS.end_event()
  end)
end

EoHS.at_init_scenario_funcs = {}
EoHS.at_init_scenario = function(func) table.insert(EoHS.at_init_scenario_funcs, func) end
EoHS.init_scenario = function()
  if EoHS.profile_replay then EoHS.debug_command({command = "enable_profiling"}) end
  -- EoHS.standardize_units()
  for i,event in pairs(EoHS.events) do wesnoth.fire("event", event) end
  EoHS.set_variable("scenario_inited", true)
  EoHS.set_variable("scenario_vars", {})
  for i,func in ipairs(EoHS.at_init_scenario_funcs) do func() end
  if EoHS.get_variable("settings_inited") then EoHS.set_variable("show_menu_item", true) end
end

EoHS.init_leader = function(unit)
  local kind
  local level = unit.level
  if unit.type ~= "Red Mage" then
    if EoHS.get_setting("non_redmage_leaders") == "redmages" then unit.type = "Red Mage"
    else kind = EoHS.get_setting("non_redmage_leaders") end
  end
  if unit.type == "Red Mage" then
    if EoHS.get_setting("redmage_leaders") == "wizards" then
      kind = "wizards"
    else kind = EoHS.get_setting("non_redmage_leaders") end
  end
  
  EoHS.set_unit_variable(unit, "original_type", unit.type)
  local modifications = EoHS.force_subtag(unit, "modifications")
  EoHS.remove_subtags(modifications, "trait", "EoHS_wizard")
  if kind == "wizards" or kind == "protected" then
    EoHS.set_unit_variable(unit, "wizard_protection", true)
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_wizard",
      name = (kind == "wizards") and _"wizard" or _"protected",
      --description = _"This unit is immune to direct damage from spells, and it can only lose a quarter of its max hitpoints each time it's attacked. Beyond that, combat stops immediately.",
    }})
  end
  if kind == "wizards" then
    level = EoHS.get_setting("wizard_starting_level")
    EoHS.set_unit_variable(unit, "wizard_level", level)
    unit.type = EoHS.appropriate_wizard_unit_type(unit.type, level) or unit.type
    EoHS.set_unit_variable(unit, "original_type", unit.type)
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_skillset(skillset)
    
    if EoHS.replace_alliances_with_era then
      local recruits = {}
      for i,recruit in ipairs(wesnoth.sides[unit.side].recruit) do recruits[recruit] = true end
      for i,alliance in ipairs(EoHS.skills.alliances) do
        local alliance_recruits = {}
        for recruit in EoHS.comma_separated_values(alliance.recruit) do alliance_recruits[recruit] = true end
        local is_same_faction = true
        for k,v in pairs(recruits) do if not alliance_recruits[k] then is_same_faction = false end end
        for k,v in pairs(alliance_recruits) do if not recruits[k] then is_same_faction = false end end
        if is_same_faction then
          skillset[alliance.id] = true
          wesnoth.fire("set_recruit", {side=unit.side, recruit=""})
          break
        end
      end
    end
    
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = unit.max_hitpoints
    EoHS.set_unit_variable(unit, "mana", EoHS.unit_mana_cap(unit) or 0)
  else
    local variables = EoHS.force_unit_variables(unit)
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_skillset(skillset) -- i.e. all false
    variables.is_wizard = nil
    EoHS.update_all_type_adjustments(unit)
    unit.hitpoints = unit.max_hitpoints
  end
  if kind == "wizards" or kind == "protected" then
    EoHS.update_wizard_trait_desc(unit)
  end
end

EoHS.init_settings = function()
  if EoHS.get_variable("first_player_picks_settings") then
    EoHS.current_player_picks_settings()
  else
    EoHS.set_variable("settings", EoHS.map_specific_default_settings())
  end
  EoHS.set_variable("settings_inited", true)
  
  EoHS.set_variable("show_menu_item", true)
  
  -- TODO: refine preselect rules (reference: 3p survival with the host in the last slot)
  local local_player_has_something_to_preselect = false
  local leaders = EoHS.get_units({ EoHS.has_unit_variable("is_starting_leader") })
  for i,unit in ipairs(leaders) do
    EoHS.init_leader(unit)
    EoHS.put_unit(unit)
    
    if EoHS.unit_can_train(unit) then
      EoHS.do_only_on_client_controlling_human_side(unit.side, function()
        local_player_has_something_to_preselect = true
      end)
    end
  end
  if not EoHS.wesnoth_113 then
  if local_player_has_something_to_preselect then
    EoHS.set_variable("client_local_preselect_side_turn", 1)
  end
  end 
end

table.insert(EoHS.events, {
  name = "preload",
  first_time_only = "no",
  { "insert_tag", {
    name = "command",
    variable = "EoHS.preload"
  }},
})

EoHS.next_scenario_initing_event_names = {
  "prestart", "start", "side_turn", "turn_refresh", "prerecruit", "recruit", "moveto"
  -- deliberately omitted: attack (because the combat events rely on the fact that they all exist before the combat),
  -- preload (because it could create different behavior after a load),
  -- side turn end (I don't know if the init relies on synchronization but I won't risk it)
}
EoHS.next_scenario_initing_event = function(name)
  return { "event", {
    name = name,
    id = "EoHS_next_scenario_initing_event_"..name,
    first_time_only = "no",
    { "filter_condition", {
      { "variable", {
        name = "EoHS.scenario_inited",
        boolean_equals = false
      }},
    }},
    { "insert_tag", {
      name = "command",
      variable = "EoHS.preload"
    }},
    { "lua", {
      code = [[--EoHS.next_scenario_initing_event("]]..name..[[")
EoHS.begin_event(true, true)
EoHS.init_scenario()
EoHS.end_event()]]
    }},
  }}
end

-- These events can normally be undone, so we don't want to trigger events on them unless we have to.
-- But we do want units to be standardized ASAP if the scenario does something!
-- We could standardize units in non-synchronized events too - or in moveto events and allow undoing -
--   but that doesn't seem worth the risk.
--[=[EoHS.selective_unit_standardization_event_names = {
  "moveto"
}
EoHS.selective_unit_standardization_event = function(name)
  return {
    name = name,
    first_time_only = "no",
    { "filter_condition", {
      { "have_unit", {
        EoHS.is_on_the_map,
        lua_function = "EoHS_standardize_wunit"
      }},
    }},
    { "lua", {
      code = [[--EoHS.selective_unit_standardization_event
EoHS.begin_event(true, true)
EoHS.standardize_units()
EoHS.end_event()]]
    }},
  }
end
for i,name in ipairs(EoHS.selective_unit_standardization_event_names) do
  table.insert(EoHS.events, EoHS.selective_unit_standardization_event(name))
end]=]

EoHS.standardize_units = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
  end
end

--[[local opposite_filters = {
  self = "opponent",
  opponent = "self",
  attacker = "defender",
  defender = "attacker",
}]]
        --[[ Comment pulled out of standardize_unit so that standardize_unit is more readable:
          Mage Shield issues:
           Later comment:
             Whoops - (1) is simply incorrect, and for (2), there was an easier way to do it, which is that multiply=0 always zeroes the CTH.
             However, I'm leaving this code here in case I need it for something later.
           
            1) After an attack event, if another attack event invalidates the combat, then the attack_end event DOES NOT occur.
              So we'd prefer not to set any temporaries in the attack event that can't be fixed before they cause problems.
            2) If a slowing attack hits, we in fact CANNOT stop the slow effect or remove it before it reduces the next swing's damage.
              Therefore, we must make the attacks all miss. There's no way to override (for instance) magical, so we have to disable it.
              Due to (1), we don't want to remove it outright, only to modify it so that it fails to apply in attacks against Mage Shield.
              Thus, the filter:
              {"not",{ EoHS.has_unit_variable("unhittable") }}
              must be applied to all [chance_to_hit] specials, except for the special one that makes shielded units unhittable.
              But it's worse than that! The filter needed depends on the special's apply_to=. For any of the four normal values,
              I have to filter the opposite one, and for apply_to=both, I have to *split the special in two* so that I can
              stop them from hitting mage shields without changing the shielded unit's own chance to hit (or vice versa).
        ]]
        --[[if (special[1] == "chance_to_hit") and not (special[2].id = "EoHS_cant_hit_unhittable_units") then
          local required_filter = {"not",{ EoHS.has_unit_variable("unhittable") }}
          local add_to_filter = function(filter)
            -- The [not] has to be last - otherwise there could be an [or] after it
            local last = filter[1] and filter[#filter]
            if not (last and (last[1] == "not") and (EoHS.get_subtag_attribute(last[2], "filter_wml.variables.EoHS.unhittable") == true)) then
              table.insert(filter, required_filter)
              did_anything = true
            end
          end
          local apply_to = special[2].apply_to or "self"
          local opposite = opposite_filters[apply_to]
          if opposite then
            add_to_filter(EoHS.force_subtag(special[2], "filter_"..opposite))
          else
            EoHS.assert(apply_to=="both", "Found bad weapon special apply_to value")
            -- Interestingly, it doesn't matter which of the two axes we split it along. I find self/opponent more elegant though.
            local other_special = EoHS.deep_copy(special)
                  special[2].apply_to = "self"    ; table.insert(EoHS.force_subtag(      special[2], "filter_opponent"), required_filter)
            other_special[2].apply_to = "opponent"; table.insert(EoHS.force_subtag(other_special[2], "filter_self"    ), required_filter)
            table.insert(specials, other_special)
            did_anything = true
          end
        end]]

local types_sync_checked = {}
--EoHS.make_filter_func("EoHS_standardize_wunit", function(wunit) return EoHS.standardize_unit(wunit.__cfg) end)
EoHS.soon(function() EoHS.universal_ability_ids = {
--   EoHS_circle_of_protection=true,
  EoHS_aegis=true,
  EoHS_light_control_receiver=true,
  [EoHS.despair_receiver_ability[2].id]=true,
} end)
EoHS.standardize_unit = function(unit)
  if EoHS.context.synchronized
      and EoHS.get_variable("time_to_check_synchronization")
      -- Doing synchronize_choice at all invokes a redraw, which we want to avoid during
      -- nested events such as attack spells
      and not EoHS.event_stack.parent then
    -- Also, avoid doing the synchronize_choice for each unit type multiple times,
    -- because it adds network delay every time
    EoHS.context.types_sync_checked_this_event = EoHS.context.types_sync_checked_this_event or {}
    if not EoHS.context.types_sync_checked_this_event [unit.type] then
      EoHS.context.types_sync_checked_this_event [unit.type] = true
      if EoHS.synchronize_choice(not types_sync_checked[unit.type]) then
        if not EoHS.verify_sync(EoHS.get_unit_type(unit.type)) then
          EoHS.message(EoHS.substitute(_"Warning: You and the current player have different versions of the $1 unit type. This will probably cause out-of-sync errors.", {EoHS.get_unit_type(unit.type).name}))
        end
        types_sync_checked[unit.type] = true
      end
    end
  end

  local subtag_ids = {}
  local did_anything = false
  -- TODO: don't have to put_unit everything standardize_unit does.
  local variables = EoHS.force_unit_variables(unit)
  
  -- TODO: reduce duplicate code between this and the utils.cfg _immediate functions
  local unison_wunits = EoHS.context.unison_wunits
  local wunit = unison_wunits and unison_wunits[unit]
  local wvariables = wunit and EoHS.force_unit_variables (wunit)
  local set_variable = function (name, value)
    variables [name] = value
    if wvariables then wvariables [name] = value end
    -- do not set did_anything, because we do not need to put_unit.
    -- TODO: rename did_anything to needs_put
  end
  
  if EoHS.context.unison and not variables.id then
    set_variable ("id", EoHS.make_new_unit_id())
    if EoHS.get_variable("settings_inited") and (unit.canrecruit and not variables.not_a_real_leader) then 
      EoHS.init_leader(unit) -- which calls standardize_unit again
      return true
    end
  end
  
  -- We set a bunch of unit attributes as variables
  -- so that the caching system can notice when they change.
  local unit_attribute_memory = EoHS.get_fake_subtag(variables, "unit_attribute_memory")
  if unit_attribute_memory.type ~= unit.type then
    variables.original_type = unit.type
    if unit_attribute_memory.type then
      EoHS.update_all_type_adjustments(unit) -- which calls standardize_unit again
      return true
    else
      set_variable ("unit_attribute_memory_type", unit.type)
    end
  end
  local remember = function(varname)
    if unit_attribute_memory[varname] ~= unit[varname] then
      set_variable ("unit_attribute_memory_"..varname, unit[varname])
    end
  end
  remember("gender"); remember("variation"); remember("image"); remember("side")
  remember("x"); remember("y")
  local status_memory = EoHS.get_fake_subtag(unit_attribute_memory, "status")
  local status = EoHS.get_subtag(unit, "status") or {}
  local override_we_need_graphics = false
  for i,k in ipairs({"poisoned","slowed"}) do
    if status_memory[k] ~= status[k] then
      set_variable ("unit_attribute_memory_status_"..k, status[k])
      override_we_need_graphics = true
    end
  end
  local is_fearless = EoHS.is_fearless(unit)
  if unit_attribute_memory.is_fearless ~= is_fearless then
    set_variable ("unit_attribute_memory_is_fearless", is_fearless)
  end
  local resistance_memory = EoHS.get_fake_subtag(unit_attribute_memory, "resistance")
  local resistance = EoHS.get_subtag(unit, "resistance")
  local resistance_changed = false
  for k,v in pairs(resistance) do
    if resistance_memory[k] ~= v then
      set_variable ("unit_attribute_memory_resistance_"..k, v)
      resistance_changed = true
    end
  end
  local alignment_changed = false
  if unit_attribute_memory.alignment ~= unit.alignment then
    alignment_changed = true
  end
  remember("alignment")
  
  if EoHS.get_variable("settings_inited") and EoHS.get_setting("eliminate_upkeep") and (unit.upkeep ~= 0) then
    unit.upkeep = 0
    did_anything = true
  end
  
  if not variables.original_name then
    set_variable ("original_name", unit.name)
  end
  local ability_ids = {}
  local abilities
  for i,subtag in ipairs(unit) do
    if subtag[2].id then subtag_ids[subtag[2].id] = true end
    if subtag[1] == "attack" then
      local special_ids = {}
      local specials = EoHS.force_subtag(subtag[2], "specials")
      for i,special in ipairs(specials) do
        if special[2].id then special_ids[special[2].id] = true end
        if EoHS.get_variable("settings_inited") and EoHS.get_setting("limit_berserk") and special[1] == "berserk" then
          if special[2].value > 3 then
            special[2].value = 3
            local fix_name = function(attr) special[2][attr] = special[2][attr] and EoHS.substitute(_"$1| (3 rounds)", {special[2][attr]}) end
            fix_name("name"); fix_name("name_inactive")
            did_anything = true
          end
        end
      end
      for i,special in ipairs(EoHS.universal_attack_specials) do
        if not special_ids[special[2].id] then
          table.insert(specials, special)
          did_anything = true
        end
      end
    end
    if subtag[1] == "abilities" then
      abilities = subtag[2]
      for i,ability in ipairs(abilities) do if ability[2].id then ability_ids[ability[2].id] = true end end
    end
  end
  for i,name in ipairs(EoHS.next_scenario_initing_event_names) do
    if not subtag_ids["EoHS_next_scenario_initing_event_"..name] then
      table.insert(unit, EoHS.next_scenario_initing_event(name))
      did_anything = true
    end
  end
  
  -- now that I optimized the special dragon abilities, disable this clumsy optimization.
  -- TODO: make sure the default AI can still handle it
  local suppress_universal_abilities = false and EoHS.get_variable("ai_is_playing") and not EoHS.is_combatant(unit)
  if suppress_universal_abilities
    -- EoHS.universal_ability_ids may not be inited yet!
    -- This can happen for prototype units if the game is reloaded during an AI turn.
    -- We don't want to mess with prototype units anyway.
    and EoHS.universal_ability_ids then
    if abilities and (EoHS.remove_subtags(abilities, "*", function(contents) return EoHS.universal_ability_ids[contents.id] end) > 0) then
      did_anything = true
    end
  else
    abilities = abilities or EoHS.force_subtag(unit, "abilities")
    if not ability_ids[EoHS.despair_receiver_ability[2].id] then
      table.insert(abilities, EoHS.despair_receiver_ability)
      did_anything = true
    end
    if alignment_changed or not ability_ids.EoHS_light_control_receiver then
      EoHS.remove_subtags(abilities, "EoHS_light_control_receiver")
      for i,ability in ipairs(EoHS.light_control_receiver_abilities[unit.alignment]) do
        table.insert(abilities, ability)
      end
      did_anything = true
    end
--     if resistance_changed or not ability_ids["EoHS_circle_of_protection"] then
--       EoHS.update_circle_of_protection_ability(unit)
--       did_anything = true
--     end
    if resistance_changed or not ability_ids["EoHS_aegis"] then
      EoHS.update_aegis_ability(unit)
      did_anything = true
    end
  end
  if EoHS.update_mount_hitpoints(unit) then did_anything = true end
  if EoHS.update_unit_overlays(unit) then did_anything = true end
  if EoHS.update_unit_graphics(unit) then did_anything = true end
  return did_anything
end

EoHS.scenario_over_cleanup_unit = function(unit)
  for i,info in ipairs(EoHS.dispellable_unit_variables) do
    if info.remove_after_scenario and EoHS.get_unit_variable(unit, info.varname) then
      info.remove_func(unit)
    end
  end
  unit.hitpoints = unit.max_hitpoints
  unit.moves = unit.max_moves
  unit.attacks_left = unit.max_attacks
  EoHS.set_subtag_attribute(unit, "status.poisoned" , false)
  EoHS.set_subtag_attribute(unit, "status.slowed"   , false)
  EoHS.set_subtag_attribute(unit, "status.uncovered", false)
end
local scenario_over_event = function()
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    EoHS.scenario_over_cleanup_unit(unit)
    EoHS.put_unit(unit)
  end
  EoHS.move_undying_to_recall()
  EoHS.set_variable("show_menu_item", false)
  EoHS.set_variable("scenario_inited", false)
  EoHS.set_variable("on_a_side_turn", false)
  --EoHS.set_variable("scenario_vars")
  for side in ipairs(wesnoth.sides) do
    EoHS.score_for_side_completing_game(side)
  end
  EoHS.score_for_game_ending()
end
EoHS.set_simple_event("victory", true, false, false, scenario_over_event)
EoHS.set_simple_event("defeat", true, false, false, scenario_over_event)

local units_func_context = function()
  local funcs = {}
  local variables_required = {}
  return function(a, b)
    if b then variables_required[a] = true end
    table.insert(funcs, b or a)
  end, function(units)
    units.with_variable = {}
    for i,unit in ipairs(units) do
      local variables = EoHS.get_unit_variables(unit)
      for v in pairs(variables_required) do if variables[v] then
        if units.with_variable[v] then table.insert(units.with_variable[v], unit)
        else units.with_variable[v] = {unit} end
      end end
    end
    for i,func in pairs(funcs) do func(units) end
  end
end
local do_side_turn_funcs; EoHS.at_side_turn, do_side_turn_funcs = units_func_context()
EoHS.set_simple_event("side_turn", true, true, true, function()
  EoHS.share_errors()
  
  EoHS.get_variable("time_to_check_synchronization", true)
  EoHS.get_units({ EoHS.is_on_the_map })
  EoHS.get_variable("time_to_check_synchronization")
  
  EoHS.set_variable("on_a_side_turn", true)
  if not EoHS.get_variable("settings_inited") then EoHS.init_settings() end
  
  if wesnoth.current.turn == 1 and wesnoth.current.side == 1 then
    EoHS.update_and_share_persistent_variables()
  else
    -- if someone else is in a menu, we don't want them to stop someone else's turn from beginning
    -- (which would happen due to the conflict of network synchronization with a blocking UI).
    -- Delaying your own turn until you leave the dialog is fine.
    EoHS.update_and_share_persistent_variables_of_side(wesnoth.current.side)
  end
  EoHS.apply_custom_default_dress_up_options()
  
  if not w111 then
    local swarms_to_move_side = EoHS.get_variable("swarms_to_move_side")
    if swarms_to_move_side then
      EoHS.move_swarms(swarms_to_move_side)
      EoHS.set_variable("swarms_to_move_side")
    end
  end
  
  EoHS.update_circle_of_protection_units()
  
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    if EoHS.get_unit_variable(unit, "best_max_moves_this_turn") then
      EoHS.set_unit_variable_immediate(unit, "best_max_moves_this_turn")
    end
    if unit.side == wesnoth.current.side and EoHS.get_unit_variable(unit, "is_wizard") then
      EoHS.set_unit_variable_immediate(unit, "shared_experience_this_turn", 0)
    end
    if unit.side == wesnoth.current.side and EoHS.get_unit_variable(unit, "forceful_summon") then
      EoHS.set_unit_variable_immediate(unit, "forceful_summon_had_chance_to_move", true)
    end
  end
  do_side_turn_funcs(units)
end)
EoHS.soon(function()
  if wesnoth.compare_versions(wesnoth.game_config.version, "<", "1.12.4") then
    EoHS.message(EoHS.substitute(_"Warning: You are running Wesnoth $1|, but EoHS is developed for versions 1.12.4 and later. This may cause bugs.", {wesnoth.game_config.version}))
  end
end)
local do_turn_refresh_funcs; EoHS.at_turn_refresh, do_turn_refresh_funcs = units_func_context()
EoHS.set_simple_event("turn_refresh", true, true, true, function()
  if EoHS.get_variable("client_local_preselect_side_turn") == wesnoth.current.side then
    EoHS.set_variable("client_local_preselect_side_turn")
    EoHS.local_player_can_preselect_skills()
  end
  
  if wesnoth.current.turn == 1 then
    local version = EoHS.synchronize_choice(function() return {v=wesnoth.game_config.version} end).v
    if wesnoth.compare_versions(version, "<", "1.12.4") then
      if wesnoth.sides[wesnoth.current.side].controller == "network" then
        EoHS.message(EoHS.substitute(_"Warning: $1| is running Wesnoth $2|, but EoHS is developed for versions 1.12.4 and later. This may cause bugs.", {EoHS.get_side_variable(wesnoth.current.side, "original_nick"), version}))
      end
    end
  end
  
  EoHS.handle_non_EoHS_terrain_changes("absolute")
  EoHS.update_terrain_changes()
  EoHS.flatten_swarms(wesnoth.current.side)
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  local rituals_finishing = {}
  for i,unit in ipairs(units) do
    -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "ritual") then
        EoHS.set_unit_action_points_immediate(unit, 0)
        EoHS.set_unit_attribute_immediate(unit, "moves", 0)
        local runes_lit = EoHS.get_unit_variable(unit, "ritual_runes_lit") + 1
        EoHS.set_unit_variable(unit, "ritual_runes_lit", runes_lit)
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
        if runes_lit >= EoHS.get_unit_variable(unit, "ritual_runes") then
          table.insert(rituals_finishing, unit)
        end
      elseif EoHS.get_unit_variable (unit, "mud_touched_recently") then
        EoHS.set_unit_variable_immediate (unit, "mud_touched_recently")
        EoHS.set_unit_action_points_immediate(unit, 0)
        EoHS.set_unit_attribute_immediate(unit, "moves", 0)
      else
        -- only refresh units that were refreshed normally by Wesnoth,
        -- and not, for instance, the units that Chaos Survival summons
        -- in its own turn refresh event, which comes just before this one.
        if unit.attacks_left == unit.max_attacks then
          EoHS.set_unit_action_points_immediate(unit, EoHS.unit_base_action_points(unit))
        end
        EoHS.earn_mana_income(unit)
      end
    --[[else
      EoHS.update_unit_overlays(unit)]] -- now done by standardize_unit
    end
    --EoHS.verify_sync(unit)
  end
  
  do_turn_refresh_funcs(units)
  
  for i,unit in ipairs(rituals_finishing) do
    -- If two rituals happen at the same time, one of them might invoke events. So reload the units if necessary.
    unit = EoHS.get_unit(EoHS.unit_id(unit))
    if unit then
      local ritual = EoHS.get_unit_variable(unit, "ritual")
      if ritual then
        -- TODO some of this should be in the same file with the other ritual code
        EoHS.set_unit_variable(unit, "ritual")
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit) -- TODO better animations for starting and ending rituals
        local ritual_parameters = EoHS.get_subtag(unit, "variables.ritual_parameters")
        EoHS.remove_subtags(unit, "variables.ritual_parameters")
        EoHS.action_message(ritual_parameters, _"$actor_name| ($actor.x|,$actor.y|) finishes casting $ritual|.", {ritual=EoHS.actions[ritual].name})
        EoHS.during_action = true
        EoHS.actions[ritual].conclude(ritual_parameters)
        EoHS.during_action = nil -- TODO decide whether actions can be nested
        -- The ritual might have triggered scenario events, so update the units (we might use them later)
        units = EoHS.get_units({ EoHS.is_on_the_map })
      end
    end
  end
  
  local prepared_trainings = EoHS.synchronize_choice(function()
    local result = {}
    local side_trainings = EoHS.client_local_trainings[wesnoth.current.side]
    if side_trainings then for k,v in pairs(side_trainings) do
      if v.training then table.insert(result, {"training", v.training}) end
      if v.dress_up then table.insert(result, {"dress_up", v.dress_up}) end
    end end
    EoHS.client_local_trainings[wesnoth.current.side] = nil
    return result
  end, function() return {ai=true} end)
  if prepared_trainings and prepared_trainings.ai then
    EoHS.set_side_variable(wesnoth.current.side, "was_ever_ai", true)
    if not EoHS.get_side_variable (wesnoth.current.side, "AI_does_not_need_accommodations") then EoHS.set_variable("ai_is_playing", true) end
    for i,unit in ipairs(units) do
      if (unit.side == wesnoth.current.side) and unit.canrecruit and EoHS.get_unit_variable(unit, "is_wizard") and not EoHS.get_unit_variable(unit, "is_apprentice") then
        if EoHS.choose_alliance_for_ai(unit) then EoHS.put_unit(unit) end
        -- Hack: Make AIs able to recruit when they ignore extra_recruit
        if not w111 then wesnoth.fire("allow_recruit", { side=unit.side, type=unit.extra_recruit }) end
      end
      -- Hack: Suppress universal abilities to make AI faster
      -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    end
  else
    -- TODO: un-duplicate code with menu.cfg
    for i,instruction in ipairs(prepared_trainings) do
      if instruction[1] == "training" then
        local unit = EoHS.get_unit(instruction[2].trainer_id)
        EoHS.train_unit_to_skillset(unit, instruction[2])
        EoHS.put_unit(unit)
      end
      if instruction[1] == "dress_up" then
        local unit = EoHS.get_unit(instruction[2].dresser_id)
        EoHS.set_unit_dress_up_options(unit, instruction[2])
        EoHS.update_unit_graphics(unit)
        EoHS.put_unit(unit)
      end
    end
  end
  
  if EoHS.get_side_variable (wesnoth.current.side, "swarms_only") then wesnoth.fire ("end_turn", {}) end
  
  EoHS.comfortably_during_turn = true
end)

EoHS.remove_forceful = function (unit)
  EoHS.set_unit_variable(unit, "forceful_summon_had_chance_to_move", nil)
  EoHS.set_unit_variable(unit, "forceful_summon", nil)
  EoHS.remove_subtags (unit, "modifications.trait", "EoHS_forceful")
  EoHS.update_all_type_adjustments (unit)
end

local do_side_turn_end_funcs; EoHS.at_side_turn_end, do_side_turn_end_funcs = units_func_context()
EoHS.set_simple_event("side_turn_end", true, w111, true, function()
  EoHS.comfortably_during_turn = false
  
  EoHS.share_errors()
  EoHS.set_variable("ai_is_playing")
  
  if w111 then
    EoHS.move_swarms(wesnoth.current.side)
  else
    EoHS.set_variable("swarms_to_move_side", wesnoth.current.side)
  end
  
  EoHS.handle_non_EoHS_terrain_changes("relative")
  local units = EoHS.get_units({ EoHS.is_on_the_map })
  for i,unit in ipairs(units) do
    -- if EoHS.standardize_unit(unit) then EoHS.put_unit(unit) end
    if unit.side == wesnoth.current.side then
      if EoHS.get_unit_variable(unit, "forceful_summon_had_chance_to_move") then
        EoHS.remove_forceful(unit)
        EoHS.put_unit(unit)
      end
      if EoHS.tick_down_summon_duration(unit, true) then EoHS.remove_unit(unit.x, unit.y) end
    end
  end
  do_side_turn_end_funcs(units)
end)
local die_funcs = {}
EoHS.at_die = function(func) table.insert(die_funcs, func) end
EoHS.set_simple_event("die", true, false, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if unit then
    if unit.canrecruit and not wesnoth.eval_conditional({
      {"have_unit",{ side=unit.side, canrecruit=true, {"not",{x=unit.x, y=unit.y}} }}
    }) then
      if EoHS.profiling then EoHS.dump_profiling() end
      EoHS.score_for_side_completing_game(unit.side)
    end
    for i,func in ipairs(die_funcs) do func(unit) end
  end
end)
EoHS.set_simple_event("advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.do_special_advancement_next(unit) then
    EoHS.set_unit_variable(unit, "doing_special_advancement", true)
    EoHS.put_unit(unit)
  end
end)
EoHS.set_simple_event("post_advance", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit") -- This calls standardize_unit, which calls update_all_type_adjustments, and put_unit
  local doing_special_advancement = EoHS.get_unit_variable(unit, "doing_special_advancement")
  if doing_special_advancement then
    EoHS.set_unit_variable(unit, "doing_special_advancement")
    if EoHS.get_unit_variable(unit, "is_summon") then
      EoHS.set_unit_variable(unit, "advanced_as_summon", unit.type)
    end
    if EoHS.get_unit_variable(unit, "is_wizard") then
      EoHS.set_unit_variable(unit, "wizard_level", (EoHS.get_unit_variable(unit, "wizard_level") or unit.level) + 1)
    end
    EoHS.update_all_type_adjustments(unit)
    -- It seems that when a unit levels up into its own type, it doesn't get fully healed.
    -- This behavior is undesirable.
    unit.hitpoints = unit.max_hitpoints
    EoHS.put_unit(unit)
  end
  -- Gently remind the user to train this unit
  if EoHS.unit_can_train(unit) then
    EoHS.do_only_on_client_controlling_human_side(unit.side, function()
      EoHS.remembered_menu_modes[EoHS.unit_id(unit)] = "training"
    end)
  end
end)

local prerecruit_prerecall_shared = function(unit)
  EoHS.set_unit_variable(unit, "extra_action_points", 0)
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
  EoHS.put_unit(unit)
end

EoHS.set_simple_event("prerecruit", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.side_is_angerpersonified(unit.side) then unit.gender = "female" end
  -- EoHS.standardize_unit(unit)
  
  if EoHS.get_unit_variable(unit, "is_wizard") then
    EoHS.set_unit_dress_up_options(unit, EoHS.random_dress_up_options(unit))
    local skillset = EoHS.get_unit_skillset(unit)
    EoHS.init_skillset(skillset)
    EoHS.set_unit_variable(unit, "mana", 0)
    EoHS.update_unit_graphics(unit)
    EoHS.update_wizard_trait_desc(unit)
  end
  if EoHS.get_unit_variable(unit, "forceful_summon") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, 1, {"trait",{
      id = "EoHS_forceful",
      name =_"battlemage bonus",
      description =_"For only one turn,",
      {"effect", {
        apply_to = "attack",
        increase_damage = "50%",
      }},
      {"effect", {
        apply_to = "hitpoints",
        increase_total = "50%",
      }},
    }})
    EoHS.remove_subtags (unit, "attack")
    unit.hitpoints = nil
    unit.max_hitpoints = nil
  end
  if ((unit.type == "Pirate Galleon") or (unit.type == "Transport Galleon")) and not EoHS.get_unit_variable(unit, "is_portal") then
    local modifications = EoHS.force_subtag(unit, "modifications")
    table.insert(modifications, {"trait",{
      id="EoHS_portable",
      name=_"portable",
      description=_"EoHS ships can be ported slowly across land, so that it's not so arbitrary whether your castle is connected to water.",
      {"effect",{
        apply_to="movement_costs",
        replace=true,
        {"movement_costs",{
          -- omitting only impassable, chasms, and mountains, which many units can't cross anyway.
          flat=unit.max_moves, fungus=unit.max_moves, hills  =unit.max_moves,
          sand=unit.max_moves, forest=unit.max_moves, village= 2,
          cave=unit.max_moves, frozen=unit.max_moves, castle = 2,
        }}
      }},
      {"effect",{
        apply_to="defense",
        replace=true,
        {"defense",{
          village= 60,
          castle = 60,
        }}
      }},
    }})
  end
  
  if not EoHS.get_unit_variable(unit, "is_summon") then
    EoHS.set_unit_variable(unit, "gold_paid", unit.cost)
  end
  
  if unit.race == "undead" then EoHS.set_unit_variable(unit, "is_reanimated", true) end

  prerecruit_prerecall_shared(unit)
end)
EoHS.set_simple_event("prerecall", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  prerecruit_prerecall_shared(unit)
end)

EoHS.set_simple_event("recall", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  if EoHS.get_unit_variable(unit, "is_portal") then
    EoHS.update_portal_tunnels()
  end
  EoHS.replace_lich_with_recall_crypt(unit)
  EoHS.place_recall_lich_near_crypt(unit)
end)

EoHS.set_simple_event("recruit", true, true, false, function()
  local unit = EoHS.at_beginning_of_event_get_autostored_unit("unit")
  
  if EoHS.get_altar_of_battle(unit.x, unit.y) and not EoHS.get_unit_variable(unit, "is_wizard") then
    EoHS.set_unit_attribute_immediate(unit, "experience", unit.max_experience)
    EoHS.unit_may_advance_soon(unit)
  end
end)

-->>)}
