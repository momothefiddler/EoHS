this_parses_in_both_wml_and_lua=hackily--{EOHS_LUA_FILE (<<-- utils-tables.cfg
-- #textdomain wesnoth-Era_of_High_Sorcery
local select = select
local getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,pcall = getmetatable,ipairs,next,pairs,setmetatable,tonumber,tostring,type,unpack,pcall
local wesnoth,table,string,math,os,debug,helper,_,EoHS,_G,_ENV = wesnoth,table,string,math,os,debug,EoHS.helper,EoHS._,EoHS,_G,nil

-- Iterating over varargs, handling nil properly
--   (cf http://lua-users.org/wiki/VarargTheSecondClassCitizen , issue #8)
EoHS.vararg = function(...)
  local t, i, l = {...}, 0, select("#", ...)
  return function()
    i = i + 1
    if i > l then return end
    return i, t[i]
  end
end

local pack = function(...) return {...} end

EoHS.substitute = function(input, values)
  if EoHS.set_variable_forbidden then
    return (string.gsub (tostring (input), "%$(.-)|", function (capture) return tostring (values [tonumber(capture) or capture]) end))
  end
  local old_values = {}
  local force_nil = {}
  for k,v in pairs(values) do
    local old_v = wesnoth.get_variable(k)
    if old_v == nil then old_v = force_nil end
    old_values[k] = old_v
    wesnoth.set_variable(k,v)
  end
  input = (wesnoth.tovconfig{string=input}).string
  for k,v in pairs(old_values) do
    if v == force_nil then v = nil end
    wesnoth.set_variable(k,v)
  end
  return input
end

-- Table return values are stored and returned as references.
-- This is intentional, to save the time one would spend copying them.
-- Modifying the tables returned from a memoized function would cause problems.
EoHS.memoized_multi_argument = function(func)
  local results = {}
  return function(...)
    local result_container = results
    for i,a in EoHS.vararg(...) do
      local idx = type(a)..tostring(a)
      local next_result_container = result_container[idx]
      if not next_result_container then
        next_result_container = {}
        result_container[idx] = next_result_container
      end
      result_container = next_result_container
    end
    local result = result_container.memoized_any__result_
    if not result then
      result = pack(func(...))
      result_container.memoized_any__result_ = result
    end
    return unpack(result)
  end
end
EoHS.memoized_one_argument = function(func)
  local results = {}
  return function(a)
    local result = results[a]
    if not result then
      result = pack(func(a))
      results[a] = result
    end
    return unpack(result)
  end
end

EoHS.shallow_copy = function(input)
  if type(input) ~= "table" then return input end
  local result = {}
  for k,v in pairs(input) do result[k]=v end
  return result
end
EoHS.shallow_overwrite = function(dst, src)
  for k,v in pairs(dst) do dst[k]=nil end
  for k,v in pairs(src) do dst[k]=v end
end
EoHS.deep_overwrite = function(dst, src)
  for k,v in pairs(dst) do dst[k]=nil end
  for k,v in pairs(src) do dst[k]=EoHS.deep_copy(v) end
end

EoHS.canonicalized_attribute = function(attr)
  --[[EoHS.set_variable("LUA_TEMP", attr)
  attr = EoHS.get_variable("LUA_TEMP")
  EoHS.set_variable("LUA_TEMP")]]
  -- I think all attributes are canonical in lua anyway, and this caused inconveniences for theme item safety
  return attr
end

EoHS.tags_are_identical = function(tag1, tag2)
  local one_sided = function(tag1, tag2)
    for k,v1 in pairs(tag1) do
      local v2 = tag2[k]
      if getmetatable(v1) == "translatable string" then
        -- ignore translatable strings.
      elseif type(v1) == "table" then
        -- the only tables are subtags, with the requisite format.
        if type(v2) ~= "table" then return false end
        if v2[1] ~= v1[1] then return false end
        if not EoHS.tags_are_identical(v1[2], v2[2]) then return false end
      else
        -- these could be strings, numbers... EoHS.canonicalized_attribute() them all because we might have issues e.g. 1 vs "1.0"
        if EoHS.canonicalized_attribute(v1) ~= EoHS.canonicalized_attribute(v2) then return false end
      end
    end
    return true
  end
  return one_sided(tag1, tag2) and one_sided(tag2, tag1)
end

EoHS.tag_diff = function(tag1, tag2)
  local infos = {}
  local function f(tag1, tag2)
    local one_sided = function(tag1, tag2, name1, name2, normal_order)
      for k,v1 in pairs(tag1) do
        local v2 = tag2[k]
        if getmetatable(v1) == "translatable string" then
          -- ignore translatable strings.
        elseif type(v1) == "table" then
          -- the only tables are subtags, with the requisite format.
          if type(v2) ~= "table" then table.insert(infos, name2.." has ["..v1[1].."] at position "..k.." missing")
          elseif v2[1] ~= v1[1] then table.insert(infos, name1.." has ["..v1[1].."] at position "..k..", but "..name2.." has ["..v2[1].."]")
          elseif normal_order then
            local str = "in ["..v1[1].."] at position "..k..":"
            table.insert(infos, str)
            f(v1[2],v2[2])
            if infos[#infos] == str then infos[#infos] = nil end
          end
        else
          -- these could be strings, numbers... EoHS.canonicalized_attribute() them all because we might have issues e.g. 1 vs "1.0"
          if EoHS.canonicalized_attribute(v1) ~= EoHS.canonicalized_attribute(v2) then table.insert(infos, name1.." has "..k.."="..tostring(v1)..", but "..name2.." has "..k.."="..tostring(v2)) end
        end
      end
      return true
    end
    one_sided(tag1, tag2, "tag 1", "tag 2", true)
    one_sided(tag2, tag1, "tag 2", "tag 1", false)
  end
  f(tag1, tag2)
  if not infos[1] then return nil end
  return table.concat(infos, "\n")
end

EoHS.comma_separated_values = function(s)
  return string.gmatch(s, "[^%s,][^,]*")
end
EoHS.lua_pattern_escape = function(s)
  return (s:gsub('[%-%.%+%[%]%(%)%$%^%%%?%*]','%%%1'):gsub('%z','%%z'))
end

EoHS.get_subtag = function(table_, subtag_path)
  local last_idx
  for name in string.gmatch(subtag_path, "[^.]+") do
    if not table_ then return nil end
    table_,last_idx = helper.get_child(table_, name)
  end
  return table_,last_idx
end
EoHS.force_subtag = function(table_, subtag_path)
  local last_idx
  for name in string.gmatch(subtag_path, "[^.]+") do
    local subtag,index = helper.get_child(table_, name)
    if subtag then
      table_,last_idx = subtag,index
    else
      if table_[name] ~= nil then EoHS.err("EoHS.force_subtag overwrote an attribute with a tag") end
      table.insert(table_, { name, {} })
      table_,last_idx = table_[#table_][2],#table_
    end
  end
  return table_,last_idx
end
EoHS.get_subtag_attribute = function(table_, path)
  local current = table_
  for name in string.gmatch(path, "[^.]+") do
    if type(current) ~= "table" then return nil end
    local next = helper.get_child(current, name)
    if next then
      current = next
    else
      current = current[name]
    end
  end
  return current
end
EoHS.set_subtag_attribute = function(table_, path, value)
  local path_list = {}
  for name in string.gmatch(path, "[^.]+") do
    table.insert(path_list, name)
  end
  for i,name in ipairs(path_list) do
    local subtag,index = helper.get_child(table_, name)
    if path_list[i+1] then
      if subtag then
        table_ = subtag
      else
        if table_[name] ~= nil then EoHS.err("EoHS.set_subtag_attribute overwrote an attribute with a tag in the middle") end
        table.insert(table_, { name, {} })
        table_ = table_[#table_][2]
      end
    else
      if type(value) == "table" then
        if table_[name] ~= nil then EoHS.err("EoHS.set_subtag_attribute overwrote an attribute with a tag") end
        if subtag then
          table_[index][2] = value
        else
          table.insert(table_, { name, value })
        end
      else
        if subtag then
          if value ~= nil then
            EoHS.err("EoHS.set_subtag_attribute overwrote a tag with an attribute")
          else
            table.remove(table_, index)
          end
        else
          table_[name] = value
        end
      end
    end
  end
end

EoHS.get_subtags = function(table_, subtag_path, accum)
  if not accum then accum = {} end
  local first, rest = string.match(subtag_path, "([^%.]+)%.(.*)")
  local find = function(subtag)
    if rest then EoHS.get_subtags(subtag, rest, accum) else table.insert(accum, subtag) end
  end
  if (first or subtag_path) == "*" then
    for i,sup    in             ipairs(table_)                       do find(sup[2]) end
  else
    for   subtag in helper.child_range(table_, first or subtag_path) do find(subtag) end
  end
  return accum
end

EoHS.remove_subtags = function(table_, subtag_path, id_or_func)
  local first, rest = string.match(subtag_path, "([^%.]+)%.(.*)")
  local num_removed = 0
  if rest then
    if first == "*" then
      for i,sup    in             ipairs(table_)        do num_removed = num_removed + EoHS.remove_subtags(sup[2], rest, id_or_func) end
    else
      for   subtag in helper.child_range(table_, first) do num_removed = num_removed + EoHS.remove_subtags(subtag, rest, id_or_func) end
    end
  else
    local i = 1
    while table_[i] do
      if ((subtag_path == "*") or (table_[i][1] == subtag_path)) and (
            (not id_or_func) or
            (table_[i][2].id == id_or_func) or
            ((type(id_or_func) == "function") and id_or_func(table_[i][2], table_[i][1]))
          ) then
        num_removed = num_removed + 1
        table_[i] = nil
        i = i + 1
      else
        if num_removed > 0 then
          table_[i-num_removed] = table_[i]
          table_[i] = nil
        end
        i = i + 1
      end
    end
  end
  return num_removed
end

EoHS.filter = function(table_, func)
  local i = 1
  local num_removed = 0
  while table_[i] do
    if not func(table_[i]) then
      num_removed = num_removed + 1
      table_[i] = nil
    else
      if num_removed > 0 then
        table_[i-num_removed] = table_[i]
        table_[i] = nil
      end
    end
    i = i + 1
  end
end

EoHS.restrict_contained_filter = function(contents, filter_tagname, filter)
  for i,tag in ipairs(contents) do
    if tag[1] == filter_tagname then
      table.insert(contents, { "and", filter })
      return
    end
  end
  table.insert(contents, { filter_tagname, filter })
end

EoHS.wml_table_is_valid = function (table_)
  local success = pcall (wesnoth.debug, table_);
  return success
end

EoHS.check_wml_table = function(wml_table, prefix)
  if not prefix then prefix = "" end
  local valid = true
  local err = function(str)
    valid = false
    EoHS.err("EoHS.check_wml_table"..prefix..": "..str)
  end
  if type(wml_table) == "table" then
    for k,v in pairs(wml_table) do
      if type(k) == "number" then
        if type(v) == "table" then
          if type(v[1]) == "string" then
            valid = valid and EoHS.check_wml_table(v[2],prefix.."["..v[1].."]")
          else
            err("Non-string tagname: ["..k.."] = "..EoHS.inspect(v, {depth=2}))
          end
        else
          err("Non-table at integer index: ["..k.."] = "..EoHS.inspect(v))
        end
      else
        if type(v) == "table" then
          err("Table at non-integer index: ["..k.."] = "..EoHS.inspect(v, {depth=1}))
        elseif type(v) == "function" then
          err("Attribute is a function: ["..k.."] = "..EoHS.inspect(v))
        end
      end
    end
  else
    err("WML table is not a table at all, but "..EoHS.inspect(wml_table))
  end
  
  if valid and not EoHS.wml_table_is_valid (wml_table) then
    err("WML table was not detected as invalid but still is: "..EoHS.inspect(wml_table))
  end
  return valid
end

EoHS.encode_to_wml_table = function(input)
  if type(input) ~= "table" then return { a=true, b=input } end
  local result = {}
  for k,v in pairs(input) do
    table.insert(result, {"key", EoHS.encode_to_wml_table(k)})
    table.insert(result, {"val", EoHS.encode_to_wml_table(v)})
  end
  return result
end
EoHS.decode_wml_table = function(input)
  if input.a then return input.b end
  local i = 1
  local result = {}
  while input[i] do
    result[EoHS.decode_wml_table(input[i][2])] = EoHS.decode_wml_table(input[i+1][2])
    i = i + 2
  end
  return result
end

EoHS.shuffle = function(t)
  for i=2,#t do
    local j = EoHS.context.unison and EoHS.random("1.."..i) or math.random(i)
    t[i],t[j] = t[j],t[i]
  end
end

-->>)}
